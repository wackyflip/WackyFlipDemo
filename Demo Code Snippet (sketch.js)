let player, ground, target;
let score = 0;
let isJumping = false;
let flipCount = 0;

function setup() {
  createCanvas(800, 600);
  player = new Player(width / 2, height - 50);
  ground = new Ground(0, height - 20, width, 20);
  target = new Target(random(100, 700), height - 100);
}

function draw() {
  background(loadImage('assets/background.jpg'));
  player.update();
  player.show();
  ground.show();
  target.show();
  textSize(20);
  text(`Score: ${score}`, 20, 30);

  if (isJumping && player.collides(target)) {
    score += calculateScore(flipCount, player.landingAccuracy(target));
    isJumping = false;
    flipCount = 0;
  }
}

function mousePressed() {
  if (!isJumping) {
    player.chargeJump();
  } else {
    player.flip();
    flipCount++;
  }
}

function mouseReleased() {
  if (!isJumping) {
    player.launch();
    isJumping = true;
  } else {
    player.stopFlipping();
  }
}

class Player {
  constructor(x, y) {
    this.pos = createVector(x, y);
    this.vel = createVector(0, 0);
    this.angle = 0;
    this.charge = 0;
  }

  chargeJump() {
    this.charge += 0.1;
  }

  launch() {
    this.vel.y = -this.charge * 10;
    this.charge = 0;
  }

  flip() {
    this.angle += PI / 2;
  }

  stopFlipping() {
    this.angle = 0;
  }

  update() {
    this.vel.y += 0.5; // Gravity
    this.pos.add(this.vel);
    if (this.pos.y > height - 50) {
      this.pos.y = height - 50;
      this.vel.y = 0;
      isJumping = false;
    }
  }

  show() {
    push();
    translate(this.pos.x, this.pos.y);
    rotate(this.angle);
    image(loadImage('assets/player.png'), -25, -25, 50, 50);
    pop();
  }

  collides(target) {
    return dist(this.pos.x, this.pos.y, target.x, target.y) < 50;
  }

  landingAccuracy(target) {
    return 1 - dist(this.pos.x, this.pos.y, target.x, target.y) / 50;
  }
}

class Ground {
  constructor(x, y, w, h) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
  }

  show() {
    fill(100);
    rect(this.x, this.y, this.w, this.h);
  }
}

class Target {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }

  show() {
    image(loadImage('assets/platform.png'), this.x - 50, this.y - 25, 100, 50);
  }
}

function calculateScore(flips, accuracy) {
  return floor((flips + 1) * accuracy * 100);
}